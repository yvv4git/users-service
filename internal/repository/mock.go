// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package repository

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/yvv4git/users-service/domain"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *MockRepository) Create(user domain.Users) (*domain.Users, error) {
	ret := _m.Called(user)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(domain.Users) *domain.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Del provides a mock function with given fields: id
func (_m *MockRepository) Del(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: user
func (_m *MockRepository) Read(user domain.Users) (*domain.Users, error) {
	ret := _m.Called(user)

	var r0 *domain.Users
	if rf, ok := ret.Get(0).(func(domain.Users) *domain.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *MockRepository) Update(user domain.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
